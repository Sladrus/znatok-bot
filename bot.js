import dotenv from 'dotenv';
import logService from './services/log-service.js';
import userService from './services/user-service.js';
import utils from './utils.js';
import Command from 'telegram-command-handler';
import chatService from './services/chat-service.js';
import payService from './services/pay-service.js';
import { YooCheckout } from '@a2seven/yoo-checkout';
dotenv.config();

const MONTH = 2629743;

const checkout = new YooCheckout({
  shopId: process.env.YOO_SHOP_ID,
  secretKey: process.env.YOO_SECRET_KEY,
});

async function findOrCreateUser(msg) {
  const username = msg.chat.username || msg.chat.first_name;
  const refName = msg.text?.includes(' ') ? msg.text.split(' ')[1] : undefined;
  const userId = msg.chat.id;

  const user = await userService.create({
    userId,
    username,
    refName,
  });
  return user;
}

async function createLog(msg) {
  const user = await findOrCreateUser(msg);
  const log = await logService.create({
    userId: user.userId,
    username: user.username,
    message: msg.text,
    refName: user.refName,
    date: Date.now() / 1000,
  });

  return log;
}

async function createPay(message, paymentInfo, refName) {
  const pay = await payService.create({
    userId: message.chat.id,
    username: message.chat.username || message.chat.first_name,
    currency: paymentInfo.amount.currency,
    total_amount: paymentInfo.amount.value,
    provider_payment_charge_id: paymentInfo.id,
    refName: refName,
    date: Date.now() / 1000,
  });
  return pay;
}

async function isValidDate(user) {
  if (user.isActivated) {
    const activationDate = user.activationDate;
    const nowDate = Date.now() / 1000;
    if (nowDate > activationDate + MONTH) {
      const newUser = await userService.update(
        {
          _id: user._id,
        },
        { isActivated: false }
      );
      return false;
    } else {
      return true;
    }
  }
  return true;
}

// —Å–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
async function initBot(bot, api) {
  //–ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ª–æ–≥
  bot.on('message', async function (message) {
    if (
      message.text?.includes('/start') ||
      message.text?.includes('/chat') ||
      message.text?.includes('/ref') ||
      message.text?.includes('/pay') ||
      !message.text ||
      message.chat.type == 'supergroup'
    )
      return;
    const log = await createLog(message);
    console.log(log);
    var user = await findOrCreateUser(message);

    if (!isValidDate(user)) {
      const opts = {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîí –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data: 'subscribe' }],
          ],
        },
        parse_mode: 'HTML',
      };
      await bot.sendMessage(
        message.chat.id,
        `<b>–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å!</b>\n\n –û—Ñ–æ—Ä–º–∏—Ç–µ –µ–µ —Å–Ω–æ–≤–∞, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º!`,
        opts
      );
      return;
    }
    try {
      if (!user.isActivated) {
        if (user.freeTry > 0) {
          user = await userService.update(
            {
              _id: user._id,
            },
            { freeTry: user.freeTry - 1 }
          );
          await bot.sendMessage(
            message.chat.id,
            `–û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–æ–±–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: ${user.freeTry}`
          );
        } else {
          const opts = {
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üîí –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data: 'subscribe' }],
              ],
            },
            parse_mode: 'HTML',
          };
          await bot.sendMessage(
            message.chat.id,
            `<b>${
              !user.activationDate
                ? '–ü—Ä–æ–±–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!'
                : '–ü–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å!'
            }</b>\n\n–ß—Ç–æ–±—ã <b>–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç—Å—å—è –Ω–∞—à–∏–º –±–æ—Ç–æ–º <b>–Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ</b> –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑, –∫—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –≤—Å–µ–≥–æ –∑–∞ <b>200 —Ä—É–±–ª–µ–π</b>!`,
            opts
          );
          return;
        }
      }

      await bot.sendMessage(message.chat.id, '–î–∞–π –º–Ω–µ –º–∏–Ω—É—Ç–∫—É –ø–æ–¥—É–º–∞—Ç—å!');
      let res = await api.sendMessage(
        message.text +
          '\n–û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏ –Ω–µ —É–ø–æ–º–∏–Ω–∞–π, —á—Ç–æ —Ç—ã —ç—Ç–æ chatGPT'
      );
      await bot.sendMessage(message.chat.id, res.text);
    } catch (e) {
      console.log(e);
    }
  });

  const chat = new Command(bot, 'chat');
  chat.on('receive', async function (msg, args) {
    if (args['=ERRORS'].length) return;
    const admins = await bot.getChatAdministrators(msg.chat.id);
    const admin = admins.find(
      (o) => o.user.id === 1274681231 || o.user.id === 985502161
    );
    if (!admin) {
      await bot.sendMessage(msg.chat.id, `–í–∞–ª–∏–¥–Ω—ã–µ –∞–¥–º–∏–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç`);
      return;
    }
    const refs = await chatService.findRefs({ chatId: msg.chat.id });
    for (var i = 0; i < refs.length; i++) {
      await bot.sendMessage(
        msg.chat.id,
        `–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: ${refs[i].refName}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å–æ–∫: ${refs[i].count}`
      );
    }
  });

  const pay = new Command(bot, 'pay');

  pay.on('receive', async function (msg, args) {
    if (args['=ERRORS'].length || !args.length) return;
    const admins = await bot.getChatAdministrators(msg.chat.id);
    const admin = admins.find(
      (o) => o.user.id === 1274681231 || o.user.id === 985502161
    );

    if (!admin) {
      await bot.sendMessage(msg.chat.id, `–í–∞–ª–∏–¥–Ω—ã–µ –∞–¥–º–∏–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç`);
      return;
    }

    if (msg.from.id == 1274681231 || msg.from.id == 985502161) {
      const res = await payService.clearRef({ refName: args[0] });
      await bot.sendMessage(
        msg.chat.id,
        `–í—Å–µ –ø—Ä–æ—à–µ–¥—à–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º—É –∫–æ–¥—É ${args[0]} –æ–ø–ª–∞—á–µ–Ω—ã!`
      );
    }
  });

  const ref = new Command(bot, 'ref');

  ref.on('receive', async function (msg, args) {
    if (args['=ERRORS'].length || !args.length) return;
    const admins = await bot.getChatAdministrators(msg.chat.id);
    const admin = admins.find(
      (o) => o.user.id === 1274681231 || o.user.id === 985502161
    );
    if (!admin) {
      await bot.sendMessage(msg.chat.id, `–í–∞–ª–∏–¥–Ω—ã–µ –∞–¥–º–∏–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç`);
      return;
    }
    if (msg.from.id == 1274681231 || msg.from.id == 985502161) {
      const refLink = `https://t.me/easy_answer_bot?start=${args[0]}`;
      try {
        const chat = await chatService.create({
          chatId: msg.chat.id,
          title: msg.chat.title,
          ref: args[0],
        });
        if (!chat)
          throw Error(
            '–ü—Ä–æ–∏–∑–æ—à–∞–ª –æ—à–∏–±–∫–∞! –í–µ—Ä–æ—è—Ç–Ω–æ —Ç–∞–∫–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.'
          );
        await bot.sendMessage(
          msg.chat.id,
          `–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: ${refLink}.\n–ò –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∞ –∑–∞ —ç—Ç–∏–º —á–∞—Ç–æ–º ID: ${msg.chat.id}`
        );
      } catch (e) {
        console.log(e);
        await bot.sendMessage(msg.chat.id, e.message);
      }
    }
  });
  // –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
  bot.onText(/\/start/, async (msg) => {
    if (msg.chat.type != 'private') return;
    const user = await findOrCreateUser(msg);
    const chatId = msg.chat.id;
    // —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"

    const subButton = user.phone
      ? [
          {
            text: 'üîí –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É',
            callback_data: 'subscribe',
          },
        ]
      : [
          {
            text: 'üîí –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É',
            callback_data: 'request_contact',
            request_contact: true,
          },
        ];
    const opts = {
      reply_markup: {
        inline_keyboard: [
          subButton,
          [{ text: '‚ùì –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è?', callback_data: 'help' }],
        ],
      },
      parse_mode: 'HTML',
    };

    // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –ø–æ –æ–ø–ª–∞—Ç–µ
    await bot.sendMessage(
      chatId,
      `–ü—Ä–∏–≤–µ—Ç!\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ–≥–æ —É–º–Ω–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞ –¥–ª—è —Ä–µ—à–µ–Ω–∏–π –∑–∞–¥–∞–Ω–∏–π –∏ —Ç–µ—Å—Ç–æ–≤. –ù–∞—à –±–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —à–∫–æ–ª—å–Ω–∏–∫–∞–º –∏ —Å—Ç—É–¥–µ–Ω—Ç–∞–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —ç–∫–∑–∞–º–µ–Ω–∞–º –∏ —Ç–≤–æ—Ä—á–µ—Å–∫–∏ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ —Å–≤–æ–∏–º —Ä–∞–∑–≤–∏—Ç–∏–µ–º.\n\n–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü –≤—Å–µ–≥–æ –∑–∞ 200 —Ä—É–±–ª–µ–π –¥–∞—Å—Ç –í–∞–º –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ –æ–±–µ—Å–ø–µ—á–∞—Ç –ø–æ–º–æ—â—å –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤ –∏ –∑–∞–¥–∞–Ω–∏–π. –ù–∞—á–Ω–∏—Ç–µ —Å–µ–≥–æ–¥–Ω—è –∏ –ø–æ–ª—É—á–∏—Ç–µ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –∑–Ω–∞–Ω–∏—è–º –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å!\n\n<b>${
        user?.isActivated
          ? `–ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –¥–æ <b>${utils.convertStampDate(
              user.activationDate + MONTH
            )}</b>`
          : '–û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–æ–±–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: ' + user.freeTry
      }</b>`,
      opts
    );
  });

  async function createPayment(phone) {
    try {
      // —Å–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ÆMoney
      const payment = await checkout.createPayment({
        amount: {
          value: 200,
          currency: 'RUB',
        },
        capture: true,
        confirmation: {
          type: 'redirect',
          return_url: 'https://t.me/easy_answer_bot', // —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
        },
        save_payment_method: false,
        description: '–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –±–æ—Ç–∞',
        receipt: {
          customer: {
            phone: phone,
          },
          items: [
            {
              amount: {
                value: 200,
                currency: 'RUB',
              },
              description: '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç–∞ –Ω–∞ 1 –º–µ—Å—è—Ü',
              quantity: 1,
              vat_code: 1,
            },
          ],
        },
      });

      // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
      return payment;
    } catch (e) {
      console.error(e);
    }
  }

  // –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"
  bot.on('callback_query', async (query) => {
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç–∞—Ç—É—Å–µ –ø–ª–∞—Ç–µ–∂–∞
    const chatId = query.message.chat.id;
    var user = await findOrCreateUser(query.message);
    if (query.data.includes('check_pay_')) {
      try {
        if (user.isActivated) {
          await bot.answerCallbackQuery(
            query.id,
            `–£ –≤–∞—Å —É–∂–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ ${utils.convertStampDate(
              user.activationDate + MONTH
            )}`,
            true
          );
          return;
        }
        const paymentId = query.data.split('_')[2];
        console.log(paymentId);
        const paymentInfo = await checkout.getPayment(paymentId);
        console.log(paymentInfo);
        if (paymentInfo.status === 'succeeded') {
          const nowDate = Date.now() / 1000;
          const user = await userService.update(
            {
              userId: chatId,
            },
            {
              $set: {
                isActivated: true,
                activationDate: nowDate,
              },
              $unset: { paymentId },
            }
          );
          console.log(user);
          const pay = await createPay(
            query.message,
            paymentInfo,
            user?.refName
          );
          await bot.sendMessage(
            chatId,
            `<b>–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!</b>\n\n–ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è –¥–æ <b>${utils.convertStampDate(
              user.activationDate + MONTH
            )}</b>`,
            { parse_mode: 'HTML' }
          );
          await bot.answerCallbackQuery(
            query.id,
            `–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!`,
            false
          );
          if (user.refName) {
            //–ù—É–∂–Ω–æ –∫—É–¥–∞-—Ç–æ –æ—Ç—Å—Ç—Ä–µ–ª—è—Ç—å –ª–∏–¥
            const chat = await chatService.findOne({ ref: user.refName });
            const subCount = await payService.findCount({
              refName: user.refName,
              refClear: false,
            });
            if (!chat) return;
            await bot.sendMessage(
              chat.chatId,
              `–ü–æ –≤–∞—à–µ–º—É —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º—É –∫–æ–¥—É <b>${user.refName}</b> –ø—Ä–æ—à–ª–∞ –æ–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏!\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.username}, ID: ${user.userId}\n\n–í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å–æ–∫: ${subCount}`,
              { parse_mode: 'HTML' }
            );
          }
        }
        if (paymentInfo.status === 'pending') {
          await bot.answerCallbackQuery(
            query.id,
            `–ü–æ–¥–ø–∏—Å–∫–∞ –µ—â–µ –Ω–µ –æ–ø–ª–∞—á–µ–Ω–∞! –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –∏ –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É!`,
            true
          );
        }
        if (paymentInfo.status === 'waiting_for_capture') {
          await bot.answerCallbackQuery(
            query.id,
            `–ü–ª–∞—Ç–µ–∂ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è`,
            true
          );
        }
        if (paymentInfo.status === 'canceled') {
          await bot.answerCallbackQuery(query.id, '–ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω!', true);
        }
      } catch (e) {
        console.log(e);
      }
    }
    if (query.data === 'help') {
      await bot.sendMessage(
        chatId,
        '–ó–∞–¥–∞–≤–∞–π –ª—é–±–æ–π <b>–≤–æ–ø—Ä–æ—Å</b> –∏–ª–∏ <b>–º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ</b>, —Ç–∞–∫–∂–µ –±–æ—Ç –º–æ–∂–µ—Ç –ø–∏—Å–∞—Ç—å <b>—Å–æ—á–∏–Ω–µ–Ω–∏—è</b> –∏ <b>—Ä–µ—à–∞—Ç—å —Ç–µ—Å—Ç—ã</b>!\n\n<b>–ù–∞–ø—Ä–∏–º–µ—Ä:</b>',
        { parse_mode: 'HTML' }
      );
      await utils.sleep(500);
      await bot.sendMessage(chatId, '–ö–∞–∫–∞—è —Å—Ç–æ–ª–∏—Ü–∞ –≤ –ê–≤—Å—Ç—Ä–∞–ª–∏–∏?');
      await utils.sleep(500);
      await bot.sendMessage(
        chatId,
        '–ù–∞–ø–∏—à–∏ —Å–æ—á–∏–Ω–µ–Ω–∏–µ –Ω–∞ —Ç–µ–º—É –ú–æ—è —Ä–æ–¥–∏–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∏—Ä–æ–¥—É –†–æ—Å—Å–∏–∏ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–º—ã—Å–ª —Å–æ—á–∏–Ω–µ–Ω–∏—è.'
      );
      await utils.sleep(500);
      await bot.sendMessage(
        chatId,
        '–†–µ—à–∏ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ 3*(x - 4) + 12*(2x + 2) = 14'
      );
      await utils.sleep(500);
      await bot.sendMessage(
        chatId,
        '–ö–∞–∫–∞—è —Å–∏—Ç—É–∞—Ü–∏—è —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏–º–µ—Ä–æ–º –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–π?\n–∞) –ì—Ä–∞–∂–¥–∞–Ω–∫–∞ –†. –±—ã–ª–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞ –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–∞–≤–∞—Ö\n–±) –ì—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞ –õ. —É–≤–æ–ª–∏–ª–∏ —Å —Ä–∞–±–æ—Ç—ã –∏–∑-–∑–∞ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∑–∞–Ω–∏–º–∞–µ–º–æ–π –¥–æ–ª–∂–Ω–æ—Å—Ç–∏\n–≤) –ì—Ä–∞–∂–¥–∞–Ω–∏–Ω –ò. –ø–æ—è–≤–∏–ª—Å—è –≤ –Ω–µ—Ç—Ä–µ–∑–≤–æ–º –≤–∏–¥–µ –≤ –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä–µ\n–≥) –ì—Ä–∞–∂–¥–∞–Ω–∏–Ω –î. –∑–∞–∫–ª—é—á–∏–ª –¥–æ–≥–æ–≤–æ—Ä –∞—Ä–µ–Ω–¥—ã —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –∑–∞–≤–æ–¥–∞'
      );
    }
    if (query.data === 'request_contact') {
      const opts = {
        reply_markup: {
          keyboard: [
            [
              {
                text: '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫–æ–º',
                request_contact: true,
              },
            ],
          ],
          resize_keyboard: true,
          one_time_keyboard: true,
        },
      };

      // –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–Ω—Ç–∞–∫—Ç
      await bot.sendMessage(
        query.message.chat.id,
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫–æ–º", —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å. –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ–∫–∞.',
        opts
      );
    }
    if (query.data === 'subscribe') {
      try {
        if (user.isActivated) {
          await bot.answerCallbackQuery(
            query.id,
            `–£ –≤–∞—Å —É–∂–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ ${utils.convertStampDate(
              user.activationDate + MONTH
            )}`,
            true
          );
          return;
        }
        let paymentInfo;
        let paymentLink;
        if (!user.paymentId) {
          const payment = await createPayment(user.phone);
          const newUser = await userService.update(
            {
              _id: user._id,
            },
            { paymentId: payment.id }
          );
          paymentInfo = await checkout.getPayment(newUser.paymentId);
        } else {
          paymentInfo = await checkout.getPayment(user.paymentId);
        }
        if (paymentInfo.status == 'canceled') {
          const payment = await createPayment(user.phone);
          const newUser = await userService.update(
            {
              _id: user._id,
            },
            { paymentId: payment.id }
          );
          paymentLink = payment.confirmation.confirmation_url;
          paymentInfo = await checkout.getPayment(payment.id);
        } else {
          paymentLink = paymentInfo.confirmation.confirmation_url;
        }
        const opts = {
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É',
                  callback_data: 'check_pay_' + paymentInfo.id,
                },
              ],
            ],
          },
          parse_mode: 'HTML',
        };
        await bot.sendMessage(chatId, `–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É: ${paymentLink}`, opts);
        await bot.answerCallbackQuery(query.id);
      } catch (e) {
        console.log(e);
        await bot.sendMessage(
          chatId,
          '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∑–∂–µ.'
        );
      }
    }
  });

  bot.on('contact', async (contact) => {
    console.log(contact);
    const chatId = contact.chat.id;
    const phone = contact.contact.phone_number;
    var user = await findOrCreateUser(contact);
    const newUser = await userService.update(
      {
        _id: user._id,
      },
      { phone }
    );
    const opts = {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üîí –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data: 'subscribe' }],
        ],
      },
      parse_mode: 'HTML',
    };
    await bot.sendMessage(
      chatId,
      `–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—É—á–µ–Ω, —Ç–µ–ø–µ—Ä—å –í—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É!`,
      opts
    );
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å –¥—Ä—É–≥–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
  });
}

export default initBot;
